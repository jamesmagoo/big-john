// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.27.0
// source: service_provider.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createServiceProvider = `-- name: CreateServiceProvider :one
INSERT INTO service_providers (
  name, specialty
) VALUES (
  $1, $2
)
RETURNING id, name, specialty
`

type CreateServiceProviderParams struct {
	Name      string      `json:"name"`
	Specialty pgtype.Text `json:"specialty"`
}

func (q *Queries) CreateServiceProvider(ctx context.Context, arg CreateServiceProviderParams) (ServiceProvider, error) {
	row := q.db.QueryRow(ctx, createServiceProvider, arg.Name, arg.Specialty)
	var i ServiceProvider
	err := row.Scan(&i.ID, &i.Name, &i.Specialty)
	return i, err
}

const deleteServiceProvider = `-- name: DeleteServiceProvider :exec
DELETE FROM service_providers
WHERE id = $1
`

func (q *Queries) DeleteServiceProvider(ctx context.Context, id int32) error {
	_, err := q.db.Exec(ctx, deleteServiceProvider, id)
	return err
}

const listServiceProviders = `-- name: ListServiceProviders :many
SELECT id, name, specialty FROM service_providers
ORDER BY name
`

func (q *Queries) ListServiceProviders(ctx context.Context) ([]ServiceProvider, error) {
	rows, err := q.db.Query(ctx, listServiceProviders)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ServiceProvider
	for rows.Next() {
		var i ServiceProvider
		if err := rows.Scan(&i.ID, &i.Name, &i.Specialty); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateServiceProvider = `-- name: UpdateServiceProvider :exec
UPDATE service_providers
SET name = $2,
    specialty = $3
WHERE id = $1
`

type UpdateServiceProviderParams struct {
	ID        int32       `json:"id"`
	Name      string      `json:"name"`
	Specialty pgtype.Text `json:"specialty"`
}

func (q *Queries) UpdateServiceProvider(ctx context.Context, arg UpdateServiceProviderParams) error {
	_, err := q.db.Exec(ctx, updateServiceProvider, arg.ID, arg.Name, arg.Specialty)
	return err
}
